/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fsm_tp.FSM
import java.util.ArrayList
import fsm_tp.Transition
import java.util.Collections
import java.util.List
import java.util.Comparator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator 
{

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) 
	{
		var myFsm = resource.contents.get(0) as FSM
		
		fsa.generateFile(myFsm.name + '.java', GenerateMain(myFsm))	
		
		fsa.generateFile('State.java', GenerateState())	
		
		fsa.generateFile(myFsm.initialstate.name + '.java', GenerateStates(myFsm.initialstate.name))
		
		myFsm.state.forEach[s | fsa.generateFile(s.name + '.java', GenerateStates(s.name))]
	}
	
	def CharSequence GenerateMain(FSM myFsm)
	{
		return 
		'''
		import java.util.Scanner;
		
		class «myFsm.name»
		{			
			public static void main (String[] args)
			{
				Scanner scan = new Scanner(System.in);
				State current = new «myFsm.initialstate.name»("«myFsm.initialstate.name»", «myFsm.initialstate.isFinal»);
				
				System.out.println("Etat initial : " + current.GetName());
				
				while(!current.GetIsFinal())
				{	
					System.out.println("Entrez un trigger : ");
					String s = scan.nextLine();
					System.out.println("Vous avez écrit : " + s);
																	
					switch(current.GetName())
					{
						«FOR tr : myFsm.transition»
							«IF tr !== null»
								case "«tr.source.name»" :
									if(s.equals("«tr.trigger»"))
									{
										current = new «tr.target.name»("«tr.target.name»", «tr.target.isFinal»);
										System.out.println(current.GetName());
									}
									break;
							«ENDIF»
						«ENDFOR»
					}
				}
			}
		}
		'''
	}
	
	def CharSequence GenerateState()
	{
		return
		'''
		abstract class State
		{
			private String name;
			private boolean isFinal = false;
			
			State(String name, boolean isFinal)
			{
				this.name = name;	
				this.isFinal = isFinal;
			}
			
			public String GetName() {return name;}
			public boolean GetIsFinal() {return isFinal;}
		}
		'''
	}
	
	def CharSequence GenerateStates(String stateName)
	{
		return
		'''
		class «stateName» extends State
		{
			«stateName»(String name, boolean isFinal)
			{
				super(name, isFinal);
			}
		}
		'''
	}
	
}
