/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator;

import fsm_tp.FSM;
import fsm_tp.State;
import fsm_tp.Transition;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    FSM myFsm = ((FSM) _get);
    String _name = myFsm.getName();
    String _plus = (_name + ".java");
    fsa.generateFile(_plus, this.GenerateMain(myFsm));
    fsa.generateFile("State.java", this.GenerateState());
    String _name_1 = myFsm.getInitialstate().getName();
    String _plus_1 = (_name_1 + ".java");
    fsa.generateFile(_plus_1, this.GenerateStates(myFsm.getInitialstate().getName()));
    final Consumer<State> _function = (State s) -> {
      String _name_2 = s.getName();
      String _plus_2 = (_name_2 + ".java");
      fsa.generateFile(_plus_2, this.GenerateStates(s.getName()));
    };
    myFsm.getState().forEach(_function);
  }
  
  public CharSequence GenerateMain(final FSM myFsm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Scanner;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _name = myFsm.getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    _builder.append("{\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main (String[] args)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Scanner scan = new Scanner(System.in);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("State current = new ");
    String _name_1 = myFsm.getInitialstate().getName();
    _builder.append(_name_1, "\t\t");
    _builder.append("(\"");
    String _name_2 = myFsm.getInitialstate().getName();
    _builder.append(_name_2, "\t\t");
    _builder.append("\", ");
    boolean _isIsFinal = myFsm.getInitialstate().isIsFinal();
    _builder.append(_isIsFinal, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Etat initial : \" + current.GetName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(!current.GetIsFinal())");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Entrez un trigger : \");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String s = scan.nextLine();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Vous avez écrit : \" + s);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch(current.GetName())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    {
      EList<Transition> _transition = myFsm.getTransition();
      for(final Transition tr : _transition) {
        {
          if ((tr != null)) {
            _builder.append("\t\t\t\t");
            _builder.append("case \"");
            String _name_3 = tr.getSource().getName();
            _builder.append(_name_3, "\t\t\t\t");
            _builder.append("\" :");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t");
            _builder.append("\t");
            _builder.append("if(s.equals(\"");
            String _trigger = tr.getTrigger();
            _builder.append(_trigger, "\t\t\t\t\t");
            _builder.append("\"))");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t");
            _builder.append("\t");
            _builder.append("{");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("\t\t");
            _builder.append("current = new ");
            String _name_4 = tr.getTarget().getName();
            _builder.append(_name_4, "\t\t\t\t\t\t");
            _builder.append("(\"");
            String _name_5 = tr.getTarget().getName();
            _builder.append(_name_5, "\t\t\t\t\t\t");
            _builder.append("\", ");
            boolean _isIsFinal_1 = tr.getTarget().isIsFinal();
            _builder.append(_isIsFinal_1, "\t\t\t\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t");
            _builder.append("\t\t");
            _builder.append("System.out.println(current.GetName());");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("\t");
            _builder.append("break;");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence GenerateState() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("abstract class State");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean isFinal = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State(String name, boolean isFinal)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.isFinal = isFinal;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String GetName() {return name;}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean GetIsFinal() {return isFinal;}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence GenerateStates(final String stateName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    _builder.append(stateName);
    _builder.append(" extends State");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(stateName, "\t");
    _builder.append("(String name, boolean isFinal)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(name, isFinal);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
